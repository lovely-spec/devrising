import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Camera, CameraOptions, PictureSourceType } from '@ionic-native/camera/ngx';
import { ActionSheetController, ToastController, Platform, LoadingController } from '@ionic/angular';
import { File, FileEntry } from '@ionic-native/file/ngx';
import { HttpClient } from '@angular/common/http';
import { WebView } from '@ionic-native/ionic-webview/ngx';
import { Storage } from '@ionic/storage';
import { FilePath } from '@ionic-native/file-path/ngx';
import { Crop } from '@ionic-native/crop/ngx';
import { ApihelperProvider } from 'src/providers/apihelper/apihelper';

 
import { finalize } from 'rxjs/operators';
import { ProfileResponse } from 'src/providers/Models/ProfileDetails';
 
const STORAGE_KEY = 'my_images';
 
@Component({
  selector: 'app-profile',
  templateUrl: './profile.page.html',
  styleUrls: ['./profile.page.scss'],
})
export class ProfilePage implements OnInit {
  croppedImagepath = "";
  isLoading = false;
  images = [];
  ProfileResponse: ProfileResponse;
  constructor(private crop: Crop,private camera: Camera, private file: File, private http: HttpClient, private webview: WebView,
    private actionSheetController: ActionSheetController, private toastController: ToastController,
    private storage: Storage, private platform: Platform,private provider: ApihelperProvider,
    private ref: ChangeDetectorRef, private filePath: FilePath, private providor: ApihelperProvider) { }
 
  ngOnInit() {
    this.platform.ready().then(() => {
      this.loadStoredImages();
       // User Details From API
    var data= this.provider.ProfileImage();
    console.log(data);
    this.ProfileResponse = this.provider.ProfileData(data);
    
    // End User Details From API
    });
   

  }
 
  loadStoredImages() {
    this.storage.get(STORAGE_KEY).then(images => {
      if (images) {
        let arr = JSON.parse(images);
        this.images = [];
        for (let img of arr) {
          let filePath = this.file.dataDirectory + img;
          let resPath = this.pathForImage(filePath);
          this.images.push({ name: img, path: resPath, filePath: filePath });
        }
      }
    });
  }
 
  pathForImage(img) {
    if (img === null) {
      return '';
    } else {
      let converted = this.webview.convertFileSrc(img);
      return converted;
    }
  }
 
  async presentToast(text) {
    const toast = await this.toastController.create({
        message: text,
        position: 'bottom',
        duration: 3000
    });
    toast.present();
  }
 



  async selectImage() {
    const actionSheet = await this.actionSheetController.create({
        header: "Select Image source",
        buttons: [{
                text: 'Load from Library',
                handler: () => {
                  // console.log('df');
                    this.takePicture(this.camera.PictureSourceType.PHOTOLIBRARY);
                }
            },
            {
                text: 'Use Camera',
                handler: () => {
                    this.takePicture(this.camera.PictureSourceType.CAMERA);
                }
            },
            {
                text: 'Cancel',
                role: 'cancel'
            }
        ]
    });
    await actionSheet.present();
}
 
takePicture(sourceType: PictureSourceType) {
    var options: CameraOptions = {
        quality: 100,
        sourceType: sourceType,
        saveToPhotoAlbum: false,
        correctOrientation: true,
        destinationType: this.camera.DestinationType.FILE_URI,
        encodingType: this.camera.EncodingType.JPEG
    };
    // Crop Image 
// this.camera.getPicture(options).then((imageData) => {
//   // imageData is either a base64 encoded string or a file URI
//   // If it's base64 (DATA_URL):
//   // let base64Image = 'data:image/jpeg;base64,' + imageData;
//   alert('dfsdf');
  
// }, (err) => {
//   // Handle error
// });
    if(this.platform.is('cordova')){
      this.camera.getPicture(options).then(imagePath => {
        
      // alert(imagePath);
       this.cropImage(imagePath);
        if (this.platform.is('android') && sourceType === this.camera.PictureSourceType.PHOTOLIBRARY) {
            this.filePath.resolveNativePath(imagePath)
                .then(filePath => {
                    let correctPath = filePath.substr(0, filePath.lastIndexOf('/') + 1);
                    let currentName = imagePath.substring(imagePath.lastIndexOf('/') + 1, imagePath.lastIndexOf('?'));
                    this.copyFileToLocalDir(correctPath, currentName, this.createFileName());
                });
        } else {
            var currentName = imagePath.substr(imagePath.lastIndexOf('/') + 1);
            var correctPath = imagePath.substr(0, imagePath.lastIndexOf('/') + 1);
            const temp_path = correctPath+currentName;
            this.startUpload(temp_path);
            this.copyFileToLocalDir(correctPath, currentName, this.createFileName());
        }
        
    });
  }
}

// crop Image

cropImage(fileUrl) {
  this.crop.crop(fileUrl, { quality: 50 })
    .then(
      newPath => {
        
        this.showCroppedImage(newPath.split('?')[0])
      },
      error => {
       
        alert('Error cropping image' + error);
      }
    );
}

async showCroppedImage(ImagePath) {
  
  const temp_path = ImagePath;
  this.startUpload(temp_path);
  // var copyPath = ImagePath;
  //   var splitPath = copyPath.split('/');
  //   var imageName = splitPath[splitPath.length - 1];
  //   var filePath = ImagePath.split(imageName)[0];
  // this.file.readAsDataURL(filePath, imageName).then(base64 => {
  //   this.croppedImagepath = base64;
  //   this.isLoading = false;
  // }, error => {
  //   alert('Error in showing image' + error);
  //   this.isLoading = false;
  // });
  
}


// Crop Image

createFileName() {
  var d = new Date(),
      n = d.getTime(),
      newFileName = n + ".jpg";
  return newFileName;
}

copyFileToLocalDir(namePath, currentName, newFileName) {
  this.file.copyFile(namePath, currentName, this.file.dataDirectory, newFileName).then(success => {
      this.updateStoredImages(newFileName);
  }, error => {
      this.presentToast('Error while storing file.');
  });
}

updateStoredImages(name) {
  this.storage.get(STORAGE_KEY).then(images => {
      let arr = JSON.parse(images);
      // alert(arr);
      if (!arr) {
          let newImages = [name];
          this.storage.set(STORAGE_KEY, JSON.stringify(newImages));
      } else {
          arr.push(name);
          this.storage.set(STORAGE_KEY, JSON.stringify(arr));
      }

      let filePath = this.file.dataDirectory + name;
      let resPath = this.pathForImage(filePath);
      let newEntry = {
          name: name,
          path: resPath,
          filePath: filePath
      };

      this.images = [newEntry, ...this.images];
      this.ref.detectChanges(); // trigger change detection cycle
  });
}
 

startUpload(imgEntry) {
  this.file.resolveLocalFilesystemUrl(imgEntry)
      .then(entry => {
        
          ( < FileEntry > entry).file(file => this.readFile(file))
      })
      .catch(err => {
          this.presentToast('Error while reading file.');
      });
}

//  async readFile(file: any) {
  
//   const reader = new FileReader();
//   const formData = new FormData();
  
//   formData.append('file', file);
//   this.uploadImageData(formData);
//   reader.readAsArrayBuffer(file);
// }
readFile(file: any) {
  const reader = new FileReader();
  
  reader.onload = (e) => {
    console.log('imgBlob');
      const formData = new FormData();
      const imgBlob = new Blob([reader.result], {
          type: file.type
      });
      
      formData.append('file', imgBlob, file.name);
      this.uploadImageData(formData);
  };
  reader.readAsArrayBuffer(file);
}

async uploadImageData(formData: FormData) {
  alert(formData);
  this.providor.ProfileData(formData);
}
deleteImage(imgEntry, position) {
  this.images.splice(position, 1);

  this.storage.get(STORAGE_KEY).then(images => {
      let arr = JSON.parse(images);
      let filtered = arr.filter(name => name != imgEntry.name);
      this.storage.set(STORAGE_KEY, JSON.stringify(filtered));

      var correctPath = imgEntry.filePath.substr(0, imgEntry.filePath.lastIndexOf('/') + 1);

      this.file.removeFile(correctPath, imgEntry.name).then(res => {
          this.presentToast('File removed.');
      });
  });
}
}